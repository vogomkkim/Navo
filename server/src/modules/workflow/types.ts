import { FastifyInstance } from 'fastify';

/**
 * @file Defines the core types for the declarative, tool-based workflow engine.
 * This file is the foundation of our autonomous AI architecture.
 */

/**
 * Describes a single, executable unit of work (a "Tool").
 * Tools are the fundamental building blocks of any workflow.
 * They are designed to be stateless, reusable, and self-describing.
 */
export interface Tool {
  /**
   * A unique identifier for the tool, e.g., "run_shell_command".
   * This is used by the AI planner to reference the tool in a Plan.
   */
  name: string;

  /**
   * A clear, concise description of what the tool does.
   * The AI uses this to understand the tool's purpose and decide when to use it.
   */
  description: string;

  /**
   * A JSON schema defining the expected input parameters for the tool.
   * This allows for validation and provides a clear contract for the AI.
   */
  inputSchema: Record<string, any>; // More specific JSON schema type can be used here

  /**
   * A JSON schema defining the shape of the tool's output.
   */
  outputSchema: Record<string, any>;

  /**
   * The actual implementation of the tool.
   * @param context - The execution context, providing access to shared resources like loggers.
   * @param input - The input parameters, validated against `inputSchema`.
   * @returns A promise that resolves with the tool's output.
   */
  execute(context: ExecutionContext, input: any): Promise<any>;
}

/**
 * Represents a single step within a workflow Plan.
 * Each step executes a specific Tool with defined inputs.
 */
export interface PlanStep {
  /**
   * A unique identifier for this step within the plan, e.g., "analyzeRequirementsStep".
   */
  id: string;

  /**
   * The name of the Tool to execute for this step. Must match a registered tool's name.
   */
  tool: string;

  /**
   * The input parameters for the tool.
   * This can contain static values or dynamic references to outputs of previous steps.
   * e.g., { "projectPath": "${steps.setupProjectStep.outputs.path}" }
   */
  inputs: Record<string, any>;

  /**
   * An array of step IDs that must be completed before this step can start.
   * This defines the DAG structure of the workflow.
   */
  dependencies?: string[];
}

/**
 * Represents the entire workflow to be executed.
 * This is the "Plan" generated by the AI planner.
 */
export interface Plan {
  /**
   * A descriptive name for the workflow.
   */
  name: string;

  /**
   * A brief explanation of the workflow's overall goal.
   */
  description: string;

  /**
   * The sequence of steps that make up the workflow.
   */
  steps: PlanStep[];
}

/**
 * The context passed to each tool during execution.
 * It provides access to shared, request-scoped resources.
 */
export interface ExecutionContext {
  // A logger instance for structured logging.
  // logger: Logger;

  // A unique ID for the entire workflow execution run.
  runId: string;

  // The Fastify application instance
  app: FastifyInstance;

  // Potentially, access to other services or configuration.
  // Optional contextual identifiers for tools that require project/user scope
  projectId?: string;
  userId?: string;
}
