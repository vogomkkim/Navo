import { FastifyInstance } from "fastify";

/**
 * @file Defines the core types for the declarative, tool-based workflow engine.
 * This file is the foundation of our autonomous AI architecture.
 */

/**
 * Describes a single, executable unit of work (a "Tool").
 * Tools are the fundamental building blocks of any workflow.
 * They are designed to be stateless, reusable, and self-describing.
 */
export interface Tool {
  /**
   * A unique identifier for the tool, e.g., "run_shell_command".
   * This is used by the AI planner to reference the tool in a Plan.
   */
  name: string;

  /**
   * A clear, concise description of what the tool does.
   * The AI uses this to understand the tool's purpose and decide when to use it.
   */
  description: string;

  /**
   * A JSON schema defining the expected input parameters for the tool.
   * This allows for validation and provides a clear contract for the AI.
   */
  inputSchema: Record<string, any>; // More specific JSON schema type can be used here

  /**
   * A JSON schema defining the shape of the tool's output.
   */
  outputSchema: Record<string, any>;

  /**
   * The actual implementation of the tool.
   * @param context - The execution context, providing access to shared resources like loggers.
   * @param input - The input parameters, validated against `inputSchema`.
   * @returns A promise that resolves with the tool's output.
   */
  execute(context: ExecutionContext, input: any): Promise<any>;
}

/**
 * Retry policy configuration for a step
 */
export interface RetryPolicy {
  /**
   * Maximum number of retry attempts
   */
  maxRetries: number;

  /**
   * Backoff strategy: 'linear', 'exponential', or 'fixed'
   */
  backoff: "linear" | "exponential" | "fixed";

  /**
   * Initial delay in milliseconds
   */
  initialDelay?: number;

  /**
   * Maximum delay in milliseconds
   */
  maxDelay?: number;
}

/**
 * Represents a single step within a workflow Plan.
 * Each step executes a specific Tool with defined inputs.
 */
export interface PlanStep {
  /**
   * A unique identifier for this step within the plan, e.g., "analyzeRequirementsStep".
   */
  id: string;

  /**
   * A user-friendly title for this step, e.g., "Setting up the project".
   * This is generated by the AI for display in the UI.
   */
  title: string;

  /**
   * A user-friendly description of what this step does.
   * This is also generated by the AI for the UI.
   */
  description: string;

  /**
   * The name of the Tool to execute for this step. Must match a registered tool's name.
   */
  tool: string;

  /**
   * The input parameters for the tool.
   * This can contain static values or dynamic references to outputs of previous steps.
   * e.g., { "projectPath": "${steps.setupProjectStep.outputs.path}" }
   */
  inputs: Record<string, any>;

  /**
   * An array of step IDs that must be completed before this step can start.
   * This defines the DAG structure of the workflow.
   */
  dependencies?: string[];

  /**
   * Optional condition for step execution
   * e.g., "${steps.previousStep.outputs.success} === true"
   */
  conditional?: string;

  /**
   * Retry policy for this step
   */
  retryPolicy?: RetryPolicy;

  /**
   * Optional rollback action step ID
   */
  rollbackAction?: string;

  /**
   * Estimated execution time in milliseconds
   */
  estimatedDuration?: number;

  /**
   * Priority level for execution (higher = more priority)
   */
  priority?: number;
}

/**
 * Represents the entire workflow to be executed.
 * This is the "Plan" generated by the AI planner.
 */
export interface Plan {
  /**
   * A descriptive name for the workflow.
   */
  name: string;

  /**
   * A brief explanation of the workflow's overall goal.
   */
  description: string;

  /**
   * The sequence of steps that make up the workflow.
   */
  steps: PlanStep[];

  /**
   * Estimated total execution time in milliseconds
   */
  estimatedDuration?: number;

  /**
   * Whether the plan can be parallelized
   */
  parallelizable?: boolean;

  /**
   * Plan metadata
   */
  metadata?: {
    version: string;
    createdAt: string;
    complexity: "simple" | "medium" | "complex";
    tags: string[];
  };
}

/**
 * The context passed to each tool during execution.
 * It provides access to shared, request-scoped resources.
 */
export interface ExecutionContext {
  // A logger instance for structured logging.
  // logger: Logger;

  // A unique ID for the entire workflow execution run.
  runId: string;

  // The Fastify application instance
  app: FastifyInstance;

  // Potentially, access to other services or configuration.
  // Optional contextual identifiers for tools that require project/user scope
  projectId?: string;
  userId?: string;
}

// --- New Types for Propose-and-Approve Workflow (Phase 1.1) ---

/**
 * Unified response type for all workflow-related requests.
 * The frontend must handle each type appropriately.
 * Design finalized in docs/plan/009_phase_1_1_api_design.md
 */
export type WorkflowResponse =
  | ExecutionStartedResponse
  | ProposalRequiredResponse
  | ClarificationNeededResponse
  | ErrorResponse;

/**
 * Returned when the AI decides to execute the plan immediately.
 * The frontend should use the sseUrl to establish an SSE connection and track progress.
 */
export interface ExecutionStartedResponse {
  type: 'EXECUTION_STARTED';
  runId: string;
  sseUrl: string;
  planSummary: PlanSummary;
}

/**
 * Returned when the AI determines that user approval is required before execution.
 * The frontend should display the proposal and wait for user action.
 */
export interface ProposalRequiredResponse {
  type: 'PROPOSAL_REQUIRED';
  proposalId: string;
  reasoning: string;
  planSummary: PlanSummary;
  confidence: number;
}

/**
 * (Future) Returned when the AI needs more information from the user to proceed.
 */
export interface ClarificationNeededResponse {
  type: 'CLARIFICATION_NEEDED';
  questions: Array<{
    id: string;
    question: string;
    type: 'text' | 'choice';
    choices?: string[];
  }>;
  context: string;
}

/**
 * Returned when a recoverable or fatal error occurs during the planning phase.
 */
export interface ErrorResponse {
  type: 'ERROR';
  errorCode: string;
  message: string;
  retryable: boolean;
}

/**
 * A summarized, security-sanitized version of a Plan, safe to send to the frontend.
 */
export interface PlanSummary {
  name: string;
  description: string;
  steps: Array<{
    id: string;
    title: string;
    description: string;
    tool: string;
  }>;
  estimatedDuration: number;
}

/**
 * The structure of a proposal stored on the backend, including the full executable plan.
 */
export interface Proposal {
  proposalId: string;
  projectId: string;
  userId: string;
  plan: Plan; // The full, executable plan object
  reasoning: string;
  confidence: number;
  createdAt: Date;
  expiresAt: Date;
}

/**
 * The expected output schema from the AI Planner, to be validated by Zod.
 */
export interface PlannerOutput {
  decision: 'execute' | 'propose';
  confidence: number;
  reasoning: string;
  plan: Plan;
}
