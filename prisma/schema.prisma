generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  projects  Project[]

  @@map("users")
}

model Project {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_id        String            @db.Uuid
  name            String
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  assets          assets[]
  pages           pages[]
  users           User              @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  publish_deploys publish_deploys[]
  suggestions     Suggestion[]

  @@map("projects")
}

model Suggestion {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId  String    @map("project_id") @db.Uuid
  type       String
  content    Json
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  applied_at DateTime? @db.Timestamptz(6)
  projects   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("suggestions")
}

model assets {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id String   @db.Uuid
  kind       String
  url        String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  projects   Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model components {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  page_id     String @db.Uuid
  type        String
  props       Json   @default("{}")
  order_index Int    @default(0)
  pages       pages  @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([page_id, order_index], map: "idx_components_page_order")
}

model events {
  id         BigInt   @id @default(autoincrement())
  project_id String?  @db.Uuid
  user_id    String?  @db.Uuid
  type       String
  data       Json?
  ts         DateTime @default(now()) @db.Timestamptz(6)

  @@index([project_id, ts], map: "idx_events_project_ts")
}

model pages {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id  String       @db.Uuid
  path        String
  layout_json Json
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime     @default(now()) @db.Timestamptz(6)
  components  components[]
  projects    Project      @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([project_id, path])
}

model publish_deploys {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id String   @db.Uuid
  url        String
  status     String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  projects   Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
